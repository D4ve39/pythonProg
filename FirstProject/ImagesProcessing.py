# importing the necessary libraries
import cv2

def nothing(frame):
    return frame

def adaptTresh(frame):
    # conversion of BGR to grayscale is necessary to apply this operation
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    # adaptive thresholding to use different threshold
    # values on different regions of the frame.
    tresh = cv2.adaptiveThreshold(gray, 255, cv2.ADAPTIVE_THRESH_MEAN_C, cv2.THRESH_BINARY_INV, 11, 2)
    #cv2.imshow('AdaptiveTreshold', tresh)
    return tresh


def smooth(frame):
    # (5, 5) is the kernel size for blurring.
    gaussianblur = cv2.GaussianBlur(frame, (5, 5), 0)
    #cv2.imshow('Smooth', gaussianblur)
    return gaussianblur


def edgeDetect(frame):
    edge_detect = cv2.Canny(frame, 100, 200)
    return edge_detect


def bitwise(frame):
    # conversion of BGR to grayscale is necessary to apply this operation
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    _, mask = cv2.threshold(gray, 0, 255, cv2.THRESH_BINARY_INV + cv2.THRESH_OTSU)
    # apply NOT operation on image and mask generated by thresholding
    BIT = cv2.bitwise_not(frame, frame, mask=mask)
    return BIT


def options(argument, frame):
    switcher = {
        0: nothing(frame),
        1: adaptTresh(frame),
        2: smooth(frame),
        3: edgeDetect(frame),
        4: bitwise(frame)
    }
    return switcher.get(argument)


# Creating a VideoCapture object to read the video
# cap = cv2.VideoCapture('sample.mp4')
cap = cv2.VideoCapture(0)

# Loop until the end of the video when filter are set

filters = int(input("Select the filter combinations you want to use: 0.NoFilter 1.AdaptThresh, 2.Smooth, 3.EdgeDetect, 4.Bitwise"))
while (filters != None) & (cap.isOpened()):
    # Capture frame-by-frame
    ret, frame = cap.read()
    #Resize frame
    frame = cv2.resize(frame, (1024, 768), fx=0, fy=0, interpolation=cv2.INTER_CUBIC)
    #1280 × 720
    if(filters == 0):
        # Display the initial frame
        cv2.imshow('Frame', frame)
    else:
        # Display the initial frame
        cv2.imshow('Frame', frame)
        # Apply filters
        opt = options(filters, frame)
        #Show resulting frame
        cv2.imshow('Filtered', opt)

    k = cv2.waitKey(1)
    if k % 256 == 27:
        # ESC key pressed => close everything
        break
    elif k % 256 == 32:
        #Space key pressed => change filter config
        filters = int(input("Choose the filter: 0.No filter 1.AdaptThresh, 2.Smooth, 3.EdgeDetect, 4.Bitwise"))

# release the video capture object
cap.release()
# Closes all the windows currently opened.
cv2.destroyAllWindows()
